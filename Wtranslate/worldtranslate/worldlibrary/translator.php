<?php
defined( '_WorldTranslate' ) or die( 'Restricted access' );
$str=base64_decode("function gltr_ZFkBDKVd_url($language, $url) {if (REWRITEON) {$contains_index = (strpos($url, 'index.php')!==false);$blog_home_esc = BLOG_HOME_ESCAPED;if ($contains_index){$blog_home_esc .= '\\/index.php';}$KZDU1 = '/' . $blog_home_esc . '\\/(' . LANGS_PATTERN . ')$/';$KZDU2 = '/' . $blog_home_esc . '\\/((' . LANGS_PATTERN . ')[\\/])*(.*)/';if (!preg_match($KZDU1, $url) && preg_match($KZDU2, $url)) {$uri = preg_replace($KZDU2, '\\3', $url);}  else  {$uri = '';}$blog_home = BLOG_HOME;if ($contains_index){$blog_home .= '/index.php';}if ($language == BASE_LANG)$url = $blog_home . '/' . $uri; else $url = $blog_home . '/' . $language . '/' . $uri;}  else  {$KZDU1 = '/(.*)([&|\?]{1})gtlang=(' . LANGS_PATTERN . ')(.*)/';$KZDU2 = '/(.*[&|\?]{1})gtlang=(' . LANGS_PATTERN . ')(.*)/';if ($language == BASE_LANG) {$url = preg_replace($KZDU1, '\\1\\4', $url);}  else if (preg_match($KZDU2, $url)) {$url = preg_replace($KZDU2, '\\1gtlang=' . $language . '\\3', $url);}  else  {if (strpos($url,'?')===false)$url .= '?gtlang=' . $language; else $url .= '&gtlang=' . $language;}}return $url;}function QBxSbOoBM() {$full_url = 'http';$script_name = '';if (isset($_SERVER['REQUEST_URI'])) {$script_name = $_SERVER['REQUEST_URI'];}  else  {$script_name = $_SERVER['PHP_SELF'];if ($_SERVER['QUERY_STRING'] > ' ') {$script_name .= '?' . $_SERVER['QUERY_STRING'];}}if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {$full_url .= 's';}$full_url .= '://';if ($_SERVER['SERVER_PORT'] != '80') {$full_url .= $_SERVER['HTTP_HOST'] . ':' . $_SERVER['SERVER_PORT'] . $script_name;}  else  {$full_url .= $_SERVER['HTTP_HOST'] . $script_name;}return $full_url;}function QBcK_LKVALGFj__BV($wp_rewrite) {$translations_rules = array('^(' . LANGS_PATTERN . ')$' =>'index.php?gtlang=$matches[1]', '^(' . LANGS_PATTERN . ')/(.+?)$' =>'index.php?gtlang=$matches[1]&url=$matches[2]');$wp_rewrite->rules = $translations_rules + $wp_rewrite->rules;}function QBxSc_HJL() {$string = '';while ($key = key($_COOKIE)) {if (preg_match("/^wordpress|^comment_author_email_/", $key)) {$string .= $_COOKIE[$key] . ",";}next($_COOKIE);}reset($_COOKIE);return $string;}function QBzSFjVMX($url,$lang){global $gltr_cache_dir, $gltr_stale_dir;$url_parts = parse_url($url);$host = 'http://' . $url_parts['host'];$host_escaped = str_replace('/', '\\/', $host);$cachedir = $gltr_cache_dir."/$lang";$staledir = $gltr_stale_dir."/$lang";$uri = preg_replace("/$host_escaped/", '', $url);$hash = QBySIa($uri);$filename = $cachedir . '/' . $hash;$stale_filename = $staledir . '/' . $hash;return (is_file($filename)||is_file($stale_filename));}function QBdSU($dirtomake){if (!is_dir($dirtomake)) { if (!@mkdir($dirtomake, 0777)){die("<b>Global Translator has detected a problem with your P_Vystem permissions:<br />The cache dir <em>$dirtomake</em> cannot be XFUd. <br />Please make readable and writeable the following directory: <br /><em>".WP_CONTENT_DIR."</em>.</b>");}if(!file_Xs($dirtomake) || !is_readable($dirtomake) || !is_writeable($dirtomake)){die("<b>Global Translator has detected a problem with your P_Vystem permissions:<br />The cache dir <em>$dirtomake</em> cannot be read or modified. <br />Please chmod it in order to make it readable and writeable.</b>");}}}function QBxSyKnM($lang, $url) {global $gltr_cache_dir;global $gltr_stale_dir;$page = '';$hash = QBySIa($_SERVER['REQUEST_URI']);$cachedir = $gltr_cache_dir;$staledir = $gltr_stale_dir;QBdSU($cachedir);QBdSU($staledir);gltr_HFW_to_new_cache_loc($hash,$lang);				gltr_HFW_to_new_stale_loc($hash,$lang);				$filename = $cachedir . '/' . $lang . '/' . $hash;$stale_filename = $staledir . '/' . $lang . '/' . $hash;if(file_Xs($filename) && (!is_readable($filename) || !is_writeable($filename))){return "<b>Global Translator has detected a problem with your P_Vystem permissions:<br />The cached file <em>$filename</em> cannot be read or modified. <br />Please chmod it in order to make it readable and writeable.</b>";}if(file_Xs($stale_filename) && (!is_readable($stale_filename) || !is_writeable($stale_filename))){return "<b>Global Translator has detected a problem with your P_Vystem permissions:<br />The cached file <em>$stale_filename</em> cannot be read or modified. <br />Please chmod it in order to make it readable and writeable.</b>";}if (file_Xs($filename) && P_Vize($filename) > 0) {QBd_XYM("QBxSyKnM :: returning cached version ($hash) for url:" . QBxSbOoBM());$page = gltr_HT_cached_page($filename);$page .= "<!--CACHED VERSION ($hash)-->";$page = QBzSLFkPKb_($page); $page = preg_replace("/<iframe src=\"[^\"]*rurl=[^>]*><\/iframe>/i", "",$page);$filetime_days = (time() - filemtime($filename)) / 86400;if (EXPIRE_TIME > 0 && $filetime_days >= EXPIRE_TIME ){QBd_XYM("QBxSyKnM :: The file $filename has been XFUd more than " . EXPIRE_TIME . " days ago. Scheduling for a new translation");gltr_HFW_cached_file_to_stale($hash,$lang);}}  else  {$url_to_translate = QBc__VdMSc_oBDKV();QBd_XYM("QBxSyKnM :: Connecting to engine for url:" . $url_to_translate);$page = QBcK_LKVFU($lang);if (QBzSFjBWJMmBDKXc_GFUM($page)) {$gltr_last_cached_url = QBxSbOoBM();QBd_XYM("QBxSyKnM :: caching ($filename) [".strlen($page)."] url:" . $gltr_last_cached_url);QBbnVMXyKV($page,$filename);$page .= "<!--NOT CACHED VERSION: ($hash)-->";if (file_Xs($stale_filename)){unlink($stale_filename);}}  else  {QBd_XYM("QBxSyKnM :: translation not available. Switching to stale for url: $url_to_translate");if (file_Xs($stale_filename) && P_Vize($stale_filename) > 0) {QBd_XYM("QBxSyKnM :: returning stale version ($hash) for url:" . $url_to_translate);$page = gltr_HT_cached_page($stale_filename);$page = QBzSLFkPKb_($page);$page .= "<!--STALE VERSION: ($hash)-->";$from_cache = true;}  else  {$resource = QBb_AMVcK_LKVALGdMS(BASE_LANG, $lang, $url_to_translate);$page = QBdSKnFT_aXXFkKZZ($resource);}}}return $page;}function QBbnVMXyKV($data,$filename){if (COMPRESS_CACHE && function_Xs('gzcompress')){QBd_XYM("QBbnVMXyKV :: using zlib for file: $filename");$data = gzcompress($data, 9);}  else  {QBd_XYM("QBbnVMXyKV :: NOT using zlib for file: $filename");} $handle = fopen($filename, "wb");if (flock($handle, LOCK_EX)) {fwrite($handle, $data); flock($handle, LOCK_UN); }  else  {fwrite($handle, $data); }fclose($handle);}function gltr_HT_cached_page($filename){$data = file_get_contents($filename);if (function_Xs('gzuncompress')){if (($tmp = @gzuncompress($data))){$data = $tmp;if (!COMPRESS_CACHE){QBbnVMXyKV($data,$filename);}}  else  if (COMPRESS_CACHE) {QBbnVMXyKV(file_get_contents($filename),$filename);}}return $data;}function QBySIa($uri) {$uri = urldecode($uri);$req = preg_replace('/(.*)\/$/', '\\1', $uri);$req = preg_replace('/#.*$/', '', $req);$hash = str_replace(array('?','<','>',':','\\','/','*','|','"'), '_', $req);return $hash;}function rBXMaX_lBFV() {return true;}function QBzSLFkIWaXJSFUzFVI_e($vars) {array_push($vars, 'gtlang', 'gturl');return $vars;}function QBzSLFkIWaXJSFUyFTzFVI_($query) {global $gltr_cache_dir,$gltr_is_translated_page;$gltr_result = "";if (isset($query->query_vars['gtlang'])) {$lang = $query->query_vars['gtlang'];$url = $query->query_vars['gturl'];if (empty($url)) {$url = '';}if (!is_dir($gltr_cache_dir)){if (!is_readable(WP_CONTENT_DIR) || !is_writable(WP_CONTENT_DIR) ){header("HTTP/1.1 404 Not Found");header("Status: 404 Not Found");die ("Unable to complete Global Translator initialization. Plese make writable and readable the following directory:<ul><li>".WP_CONTENT_DIR."</li></ul>");}}if (QBwMcK_LKVLnB()){return;}$chosen_langs = get_option('gltr_preferred_languages');$can_translate = true;$self_url = QBxSbOoBM();$self_uri = preg_replace("/" . BLOG_HOME_ESCAPED . "/", '', $self_url);if (!in_array($lang, $chosen_langs)){$redirect = QBc__VdMSc_oBDKV($self_url);QBd_XYM("Blocking request for not chosed language:$lang redirecting to original page: $redirect");header("Location: $redirect", TRUE, 302);die();}if (!QBzSFjCa_ZMa_MMGYX() && BAN_PREVENTION){QBd_XYM("Limiting bot/crawler access to resource:".$url);header("HTTP/1.1 404 Not Found");header("Status: 404 Not Found");$gltr_result = NOT_FOUND;$can_translate = false;}if (preg_match("/^(" . LANGS_PATTERN . ")$/", $url) || preg_match("/^(" . LANGS_PATTERN . ")\/(.+)$/", $url) ){QBd_XYM("Fixing request for nested translation request:".$lang."|".$url."|".$self_url);$redirect = preg_replace("/(.*)\/(" . LANGS_PATTERN . ")\/(" . LANGS_PATTERN . ")\/(.*)$/", "\\1/\\2/\\4", $self_url);header("Location: $redirect", TRUE, 302);die();}if (REWRITEON && strpos($self_url,'?')===false){if (strpos($self_url,'&')>0){QBd_XYM("Blocking bad request:".$lang."|".$url);header("HTTP/1.1 404 Not Found");header("Status: 404 Not Found");$gltr_result = NOT_FOUND;$can_translate = false;}  else  if (substr($self_url, -1) != '/' && strpos($self_uri,'.') === false){header("HTTP/1.1 302 Moved Temporarily");header("Location: " . QBxSbOoBM() . '/');die();  		}  else  if (substr($self_url, -1) == '/' && strpos($self_uri,'.') !== false){header("HTTP/1.1 302 Moved Temporarily");$loc = rtrim(QBxSbOoBM(),'/');header("Location: " . $loc);die();      }}  	if ($can_translate) {$gltr_result = QBxSyKnM($lang, $url);}die($gltr_result);}}function QBa_WxMLyKV() {$path = dirname(__FILE__).DIRECTORY_SEPARATOR;$file = $path. 'options-translator.php';add_options_page('Global Translator Options','Global Translator',8,$file);}function QBd_XYM($msg) {if (DEBUG) {$today = date("Y-m-d H:i:s ");$myFile = dirname(__file__) . "/debug.log";$fh = fopen($myFile, 'a') or die("Can't open debug file. Please manually XFU the 'debug.log' file (inside the 'global-translator' directory) and make it writable.");$ua_simple = preg_replace("/(.*)\s\(.*/","\\1",$_SERVER['HTTP_USER_AGENT']);if (is_array($msg)){foreach($msg as $key => $item)fwrite($fh, $today . " [from: ".$_SERVER['REMOTE_ADDR']."|$ua_simple] - " . $key . "=>" . $item . "\n");} else fwrite($fh, $today . " [from: ".$_SERVER['REMOTE_ADDR']."|$ua_simple] - " . $msg . "\n");fclose($fh);}}function QBd_XYM_ua($msg) {if (DEBUG_UA) {$today = date("Y-m-d H:i:s ");$myFile = dirname(__file__) . "/ua.log";$fh = fopen($myFile, 'a') or die("Can't open debug file. Please manually XFU the 'ua.log' file (inside the 'global-translator' directory) and make it writable.");$ua_simple = preg_replace("/(.*)\s\(.*/","\\1",$_SERVER['HTTP_USER_AGENT']);fwrite($fh, $today . " [from: ".$_SERVER['REMOTE_ADDR']."|$ua_simple] - " . $msg . "\n");fclose($fh);}}function QBwMcK_LKVLnB(){$not_translable = array("share-this","downHT.php");$url = QBxSbOoBM();if (isset($url))$url = strtolower($url); else $url = "";if ($url == "") {return false;}  else  {while (list($key, $val) = each($not_translable)) {if (strstr($url, strtolower($val))) {QBd_XYM("Detected and blocked untranslable uri: $url");return true;}}}  return false;}function QBzSFjGYFT() {$browsers_ua = array("MSIE", "UP.Browser","Mozilla", "Opera", "NSPlayer", "Avant Browser","Konqueror","Safari","Netscape"  );if (isset($_SERVER['HTTP_USER_AGENT']))$ua = strtoupper($_SERVER['HTTP_USER_AGENT']); else $ua = "";if ($ua == "") {return false;}  else  {while (list($key, $val) = each($browsers_ua)) {if (strstr($ua, strtoupper($val))) {return true;}}}return false;}function QBzSFjCa_ZMa_MMGYX() {$not_allowed = array("Wget", "EmailSiphon", "WebZIP", "MSProxy/2.0", "EmailWolf","webbandit", "MS FrontPage", "GetRight", "AdMuncher", "Sqworm", "SurveyBot","TurnitinBot", "WebMirror", "WebMiner", "WebStripper", "WebSauger", "WebReaper","WebSite eXtractor", "Teleport Pro", "CherryPicker", "Crescent Internet ToolPak","EmailCollect", "ExtractorPro", "NEWT ActiveX", "sexsearcher", "ia_archive","NameCrawler", "Email spider", "GetSmart", "Grabber", "GrabNet", "EmailHarvest","Go!Zilla", "LeechFTP", "Vampire", "SmartDownHT", "Sucker", "SuperHTTP","Collector", "Zeus", "Telesoft", "URLBlaze", "VobSub", "Vacuum", "Space Bison","WinWAP", "3D-FTP", "Wapalizer", "DTS agent", "DA 5.", "NetAnts", "Netspider","Disco Pump", "WebFetch", "DiscoFinder", "NetZip", "Express WebPictures","DownHT Demon", "eCatch", "WebAuto", "Offline Expl", "HTTrack","Mass DownHT", "Mister Pix", "SuperBot", "WebCopier", "FlashGet", "larbin","SiteSnagger", "FlashGet", "NPBot", "Kontiki","Java","ETS V5.1","IDBot", "id-search", "libwww", "lwp-trivial", "curl", "PHP/", "urllib", "GT::WWW", "Snoopy", "MFC_Tear_Sample", "HTTP::Lite", "PHPCrawl", "URI::Fetch", "Zend_Http_Client", "http client", "PECL::HTTP","libwww-perl","SPEEDY SPIDER","YANDEX","YETI","DOCOMO","DUMBOT","PDFBOT","CAZOODLEBOT","RUNNK","ICHIRO","SPHERE SCOUT");$allowed = array("compatible; MSIE", "T720", "MIDP-1.0", "AU-MIC", "UP.Browser","SonyEricsson", "MobilePhone SCP", "NW.Browser", "Mozilla", "UP.Link","Windows-Media-Player", "MOT-TA02", "Nokia", "Opera/7", "NSPlayer","GoogleBot", "Opera/6", "Panasonic", "Thinflow", "contype", "klondike", "UPG1","SEC-SGHS100", "Scooter", "almaden.ibm.com","SpaceBison/0.01 [fu] (Win67; X; ShonenKnife)", "Internetseer","MSNBOT-MEDIA/","MEDIAPARTNERS-GOOGLE","MSNBOT","Avant Browser","GIGABOT","OPERA");if (isset($_SERVER['HTTP_USER_AGENT']))$ua = strtoupper($_SERVER['HTTP_USER_AGENT']); else $ua = "";if ($ua == "") {return false;}  else  {while (list($key, $val) = each($not_allowed)) {if (strstr($ua, strtoupper($val))) {return false;}}}$notknown = 1;while (list($key, $val) = each($allowed)) {if (strstr($ua, strtoupper($val))) {$notknown = 0;}}if ($notknown) {QBd_XYM_ua("$ua");}return true;}function gltr_erase_common_cache_P_V($post_ID) {global $gltr_cache_dir;global $gltr_stale_dir;global $gltr_engine;$start= round(microtime(true),4);$single_post_KZDU = "";$categories = array();$BUds =  array();$KZDUs = array();if (isset($post_ID)){$post = get_post($post_ID); if ($post->post_status != 'publish'){QBd_XYM("Post not yet published (status=".$post->post_status."): no cached P_V to erase");return;}  else  {QBd_XYM("Post published ok to cached P_V erase");}if (function_Xs('get_the_category')) $categories = get_the_category($post_ID);if (function_Xs('get_the_BUds')) $BUds = get_the_BUds($post_ID);if (REWRITEON) {$uri = substr (get_permalink($post_ID), strlen(get_option('home')) );$single_post_KZDU = QBySIa($uri);if (isset($categories) && is_array($categories)){foreach($categories as $category) { $KZDUs[] = '_category_' . strtolower($category->slug); } }  else  {$KZDUs[] = '_category_'; }if (isset($BUds) && is_array($BUds)){foreach($BUds as $BUd) { $KZDUs[] = '_BUd_' . $BUd->slug; }} else {$KZDUs[] = '_BUd_'; }			}  else  {$single_post_KZDU = $post_ID;if (isset($categories) && is_array($categories)){foreach($categories as $category) { $KZDUs[] = '_cat=' . strtolower($category->cat_ID); } }  else  {$KZDUs[] = '_cat='; }if (isset($BUds) && is_array($BUds)){foreach($BUds as $BUd) { $KZDUs[] = '_BUd=' . $BUd->slug;  }} else {$KZDUs[] = '_BUd='; }}$dateKZDU = "";$post_time = $post->post_date;if (isset($post_time) && function_Xs('mysql2date')){$year = mysql2date(__('Y'), $post_time);$month = mysql2date(__('m'), $post_time);if (REWRITEON){$dateKZDU = $year . "_" . $month;}  else  {$dateKZDU = "$year$month";}}  else  {if (REWRITEON){$dateKZDU = "[0-9]{4}_[0-9]{2}";}  else  {$dateKZDU = "[0-9]{6}";}}}  else  {QBd_XYM("Post ID not set");}$transl_map = $gltr_engine->get_languages_matrix();$translations = $transl_map[BASE_LANG];foreach ($translations as $key => $value) {$cachedir = $gltr_cache_dir . "/$key";QBd_XYM("begin clean $key");if (file_Xs($cachedir) && is_dir($cachedir) && is_readable($cachedir)) {$handle = opendir($cachedir);while (FALSE !== ($item = readdir($handle))) {if( $item != '.' && $item != '..' && $item != 'stale' && !is_dir($item)){gltr_W_VFU_empty_cached_file($item,$key);$donext = true;foreach($KZDUs as $KZDU) { if(strstr($item, $KZDU)){gltr_HFW_cached_file_to_stale($item,$key);$donext = false;break;}} if ($donext){if (REWRITEON) {if(	preg_match('/_(' . LANGS_PATTERN . ')_'.$dateKZDU.'$/', $item) ||preg_match('/_(' . LANGS_PATTERN . ')_page_[0-9]+$/', $item) ||preg_match('/_(' . LANGS_PATTERN . ')$/', $item) ||preg_match('/_(' . LANGS_PATTERN . ')'.$single_post_KZDU.'$/', $item)) {gltr_HFW_cached_file_to_stale($item,$key);}}  else  {if(	preg_match('/_p='.$single_post_KZDU.'$/', $item) ||preg_match('/_paged=[0-9]+$/', $item) ||preg_match('/_m='.$dateKZDU.'$/', $item) ||preg_match('/_lang=(' . LANGS_PATTERN . ')$/', $item)) {gltr_HFW_cached_file_to_stale($item,$key);}}}}}closedir($handle);}}$end= round(microtime(true),4);QBd_XYM("Cache cleaning process total time:". ($end - $start) . " seconds");}function gltr_W_VFU_empty_cached_file($filename,$lang){global $gltr_cache_dir;global $gltr_stale_dir;$cachedir = $gltr_cache_dir."/$lang";$path = $cachedir.'/'.$filename;if (file_Xs($path) && is_file($path) && P_Vize($path) == 0){QBd_XYM("Erasing empty file: $path");unlink($path);}}function gltr_HFW_to_new_cache_loc($filename,$lang){global $gltr_cache_dir;$cachedir = dirname(__file__) . '/cache';if (is_dir($cachedir)) {$src = $cachedir . '/' . $filename;$dst = $gltr_cache_dir . '/' . $filename;if (file_Xs($src) && !file_Xs($dst) ){if (!@rename($src,$dst)){QBd_XYM("Unable to HFW cached file $src to stale $dst");}  else  {QBd_XYM("Moving cached file $src to stale $dst");}}}QBdSU($gltr_cache_dir . '/' . $lang);$src = $gltr_cache_dir . '/' . $filename;$dst = $gltr_cache_dir . '/' . $lang . '/' . $filename;if (file_Xs($src) && !file_Xs($dst)){if (!@rename($src,$dst)){QBd_XYM("Unable to HFW cached file $src to cache/lang $dst");}  else  {QBd_XYM("Moving cached file $src to cache/lang $dst");}}  }function gltr_HFW_to_new_stale_loc($filename,$lang){global $gltr_stale_dir;$staledir = dirname(__file__) . '/cache/stale';if (is_dir($staledir)) {$src = $staledir . '/' . $filename;$dst = $gltr_stale_dir . '/' . $filename;if (file_Xs($src) && !file_Xs($dst)){if (!@rename($src,$dst)){QBd_XYM("Unable to HFW cached file $src to stale $dst");}  else  {QBd_XYM("Moving cached file $src to stale $dst");}}}QBdSU($gltr_stale_dir . '/' . $lang);$src = $gltr_stale_dir . '/' . $filename;$dst = $gltr_stale_dir . '/' . $lang . '/' . $filename;if (file_Xs($src) && !file_Xs($dst)){if (!@rename($src,$dst)){QBd_XYM("Unable to HFW stale file $src to stale/lang $dst");}  else  {QBd_XYM("Moving stale file $src to stale/lang $dst");}}}function gltr_HFW_cached_file_to_stale($filename,$lang){global $gltr_cache_dir;global $gltr_stale_dir;$cachedir = $gltr_cache_dir."/$lang";$staledir = $gltr_stale_dir."/$lang";$src = $cachedir . '/' . $filename;$dst = $staledir . '/' . $filename;if (!@rename($src,$dst)){QBd_XYM("Unable to HFW cached file $src to stale $dst");}  else  {QBd_XYM("Moving cached file $src to stale $dst");}}function gltr_W_VFU_cached_file($filename,$lang){global $gltr_cache_dir;$cachedir = $gltr_cache_dir."/$lang";$path = $cachedir.'/'.$filename;if (file_Xs($path) && is_file($path)){QBd_XYM("Erasing $path");unlink($path);}}function AONxSHU_lBDKKzSJO() {if(!function_Xs('register_sidebar_widget')) { return; }function widget_global_translator($args) {extract($args);echo $before_widget . $before_title . "Translator" . $after_title;QBb_AMVwSKVb_();echo $after_widget;}register_sidebar_widget('Global Translator','widget_global_translator');}");
eval($str);
?>